"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deep_equal_1 = __importDefault(require("deep-equal"));
function stripLoc(obj) {
    return JSON.parse(JSON.stringify(obj, (key, value) => {
        if (key === "loc") {
            return undefined;
        }
        return value;
    }));
}
function checkNodeImplementsInterfaces(node, interfaces) {
    var _a;
    if (!((_a = node.interfaces) === null || _a === void 0 ? void 0 : _a.length)) {
        return;
    }
    node.interfaces.forEach((inter) => {
        var _a, _b;
        const error = new Error(`type ${node.name.value} does not implement interface ${inter.name.value} correctly`);
        const interDefinition = interfaces.find((x) => x.name.value === inter.name.value);
        if (!interDefinition) {
            throw error;
        }
        (_a = interDefinition.directives) === null || _a === void 0 ? void 0 : _a.forEach((interDirec) => {
            var _a;
            const nodeDirec = (_a = node.directives) === null || _a === void 0 ? void 0 : _a.find((x) => x.name.value === interDirec.name.value);
            if (!nodeDirec) {
                throw error;
            }
            const isEqual = deep_equal_1.default(stripLoc(nodeDirec), stripLoc(interDirec));
            if (!isEqual) {
                throw error;
            }
        });
        (_b = interDefinition.fields) === null || _b === void 0 ? void 0 : _b.forEach((interField) => {
            var _a;
            const nodeField = (_a = node.fields) === null || _a === void 0 ? void 0 : _a.find((x) => x.name.value === interField.name.value);
            if (!nodeField) {
                throw error;
            }
            const isEqual = deep_equal_1.default(stripLoc(nodeField), stripLoc(interField));
            if (!isEqual) {
                throw error;
            }
        });
    });
}
exports.default = checkNodeImplementsInterfaces;
//# sourceMappingURL=check-node-implements-interfaces.js.map