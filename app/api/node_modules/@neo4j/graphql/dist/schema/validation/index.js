"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const schema_1 = require("@graphql-tools/schema");
const graphql_compose_1 = require("graphql-compose");
const scalars = __importStar(require("../scalars"));
const scalars_1 = require("./scalars");
const enums = __importStar(require("./enums"));
const directives = __importStar(require("./directives"));
function filterDocument(document) {
    return Object.assign(Object.assign({}, document), { definitions: document.definitions.reduce((res, def) => {
            var _a, _b;
            if (def.kind !== "ObjectTypeDefinition" && def.kind !== "InterfaceTypeDefinition") {
                return [...res, def];
            }
            return [
                ...res,
                Object.assign(Object.assign({}, def), { directives: (_a = def.directives) === null || _a === void 0 ? void 0 : _a.filter((x) => !["auth"].includes(x.name.value)), fields: (_b = def.fields) === null || _b === void 0 ? void 0 : _b.map((f) => {
                        var _a;
                        return (Object.assign(Object.assign({}, f), { directives: (_a = f.directives) === null || _a === void 0 ? void 0 : _a.filter((x) => !["auth"].includes(x.name.value)) }));
                    }) }),
            ];
        }, []) });
}
function validateSchema(document) {
    const composer = new graphql_compose_1.SchemaComposer();
    const doc = graphql_1.print(filterDocument(document));
    composer.addTypeDefs(graphql_compose_1.printScalar(scalars_1.ScalarType));
    Object.values(scalars).forEach((scalar) => {
        composer.addTypeDefs(graphql_compose_1.printScalar(scalar));
    });
    Object.values(enums).forEach((e) => {
        composer.addTypeDefs(graphql_compose_1.printEnum(e));
    });
    Object.values(directives).forEach((directive) => {
        composer.addTypeDefs(graphql_compose_1.printDirective(directive));
    });
    composer.addTypeDefs(doc);
    // this is fake
    composer.Query.addFields({
        fake: {
            type: "Boolean",
            resolve: () => false,
        },
    });
    // add directives to new document
    // add fake query to document to make it a valid schema
    schema_1.makeExecutableSchema({
        typeDefs: composer.toSDL(),
        resolvers: composer.getResolveMethods(),
    });
}
exports.default = validateSchema;
//# sourceMappingURL=index.js.map