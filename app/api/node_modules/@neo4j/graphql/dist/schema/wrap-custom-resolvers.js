"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_auth_param_1 = __importDefault(require("../translate/create-auth-param"));
function wrapCustomResolvers({ resolvers, generatedResolvers, nodeNames, }) {
    let newResolvers = {};
    const _a = resolvers, { Query: customQueries = {}, Mutation: customMutations = {}, Subscription: customSubscriptions = {} } = _a, rest = __rest(_a, ["Query", "Mutation", "Subscription"]);
    if (customQueries) {
        if (generatedResolvers.Query) {
            newResolvers.Query = Object.assign(Object.assign({}, generatedResolvers.Query), customQueries);
        }
        else {
            newResolvers.Query = customQueries;
        }
    }
    if (customMutations) {
        if (generatedResolvers.Mutation) {
            newResolvers.Mutation = Object.assign(Object.assign({}, generatedResolvers.Mutation), customMutations);
        }
        else {
            newResolvers.Mutation = customMutations;
        }
    }
    if (Object.keys(customSubscriptions).length) {
        newResolvers.Subscription = customSubscriptions;
    }
    const typeResolvers = Object.entries(rest).reduce((r, entry) => {
        const [key, value] = entry;
        if (!nodeNames.includes(key)) {
            return r;
        }
        return Object.assign(Object.assign({}, r), { [key]: Object.assign(Object.assign({}, generatedResolvers[key]), value) });
    }, {});
    newResolvers = Object.assign(Object.assign({}, newResolvers), typeResolvers);
    (function wrapResolvers(obj) {
        Object.entries(obj).forEach(([key, value]) => {
            if (typeof value === "function") {
                obj[key] = (...args) => {
                    const { driver } = args[2];
                    if (!driver) {
                        throw new Error("context.diver missing");
                    }
                    const auth = create_auth_param_1.default({ context: args[2] });
                    args[2] = Object.assign(Object.assign({}, args[2]), { auth });
                    return value(...args);
                };
                return;
            }
            if (typeof value === "object") {
                obj[key] = value;
                wrapResolvers(value);
            }
        });
        return obj;
    })(newResolvers);
    // Not to wrap the scalars and directives
    const otherResolvers = Object.entries(rest).reduce((r, entry) => {
        const [key, value] = entry;
        if (nodeNames.includes(key)) {
            return r;
        }
        return Object.assign(Object.assign({}, r), { [key]: value });
    }, {});
    newResolvers = Object.assign(Object.assign({}, newResolvers), otherResolvers);
    return newResolvers;
}
exports.default = wrapCustomResolvers;
//# sourceMappingURL=wrap-custom-resolvers.js.map