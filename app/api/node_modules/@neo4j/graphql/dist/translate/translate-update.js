"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camelcase_1 = __importDefault(require("camelcase"));
const pluralize_1 = __importDefault(require("pluralize"));
const create_where_and_params_1 = __importDefault(require("./create-where-and-params"));
const create_projection_and_params_1 = __importDefault(require("./create-projection-and-params"));
const create_create_and_params_1 = __importDefault(require("./create-create-and-params"));
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const create_update_and_params_1 = __importDefault(require("./create-update-and-params"));
const create_connect_and_params_1 = __importDefault(require("./create-connect-and-params"));
const create_disconnect_and_params_1 = __importDefault(require("./create-disconnect-and-params"));
const constants_1 = require("../constants");
const create_delete_and_params_1 = __importDefault(require("./create-delete-and-params"));
function translateUpdate({ node, context }) {
    var _a, _b;
    const { resolveTree } = context;
    const whereInput = resolveTree.args.where;
    const updateInput = resolveTree.args.update;
    const connectInput = resolveTree.args.connect;
    const disconnectInput = resolveTree.args.disconnect;
    const createInput = resolveTree.args.create;
    const deleteInput = resolveTree.args.delete;
    const varName = "this";
    const matchStr = `MATCH (${varName}:${node.name})`;
    let whereStr = "";
    let updateStr = "";
    const connectStrs = [];
    const disconnectStrs = [];
    const createStrs = [];
    let deleteStr = "";
    let projAuth = "";
    let projStr = "";
    let cypherParams = {};
    const whereStrs = [];
    const { fieldsByTypeName } = resolveTree.fieldsByTypeName[`Update${pluralize_1.default(node.name)}MutationResponse`][pluralize_1.default(camelcase_1.default(node.name))];
    if (whereInput) {
        const where = create_where_and_params_1.default({
            whereInput,
            varName,
            node,
            context,
            recursing: true,
        });
        if (where[0]) {
            whereStrs.push(where[0]);
            cypherParams = Object.assign(Object.assign({}, cypherParams), where[1]);
        }
    }
    const whereAuth = create_auth_and_params_1.default({
        operation: "UPDATE",
        entity: node,
        context,
        where: { varName, node },
    });
    if (whereAuth[0]) {
        whereStrs.push(whereAuth[0]);
        cypherParams = Object.assign(Object.assign({}, cypherParams), whereAuth[1]);
    }
    if (whereStrs.length) {
        whereStr = `WHERE ${whereStrs.join(" AND ")}`;
    }
    if (updateInput) {
        const updateAndParams = create_update_and_params_1.default({
            context,
            node,
            updateInput,
            varName,
            parentVar: varName,
            withVars: [varName],
        });
        [updateStr] = updateAndParams;
        cypherParams = Object.assign(Object.assign({}, cypherParams), updateAndParams[1]);
    }
    if (disconnectInput) {
        Object.entries(disconnectInput).forEach((entry) => {
            const relationField = node.relationFields.find((x) => x.fieldName === entry[0]);
            const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
            const disconnectAndParams = create_disconnect_and_params_1.default({
                context,
                parentVar: varName,
                refNode,
                relationField,
                value: entry[1],
                varName: `${varName}_disconnect_${entry[0]}`,
                withVars: [varName],
                parentNode: node,
            });
            disconnectStrs.push(disconnectAndParams[0]);
            cypherParams = Object.assign(Object.assign({}, cypherParams), disconnectAndParams[1]);
        });
    }
    if (connectInput) {
        Object.entries(connectInput).forEach((entry) => {
            const relationField = node.relationFields.find((x) => x.fieldName === entry[0]);
            const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
            const connectAndParams = create_connect_and_params_1.default({
                context,
                parentVar: varName,
                refNode,
                relationField,
                value: entry[1],
                varName: `${varName}_connect_${entry[0]}`,
                withVars: [varName],
                parentNode: node,
            });
            connectStrs.push(connectAndParams[0]);
            cypherParams = Object.assign(Object.assign({}, cypherParams), connectAndParams[1]);
        });
    }
    if (createInput) {
        Object.entries(createInput).forEach((entry) => {
            const relationField = node.relationFields.find((x) => x.fieldName === entry[0]);
            const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
            const inStr = relationField.direction === "IN" ? "<-" : "-";
            const outStr = relationField.direction === "OUT" ? "->" : "-";
            const relTypeStr = `[:${relationField.type}]`;
            const creates = relationField.typeMeta.array ? entry[1] : [entry[1]];
            creates.forEach((create, index) => {
                const innerVarName = `${varName}_create_${entry[0]}${index}`;
                const createAndParams = create_create_and_params_1.default({
                    context,
                    node: refNode,
                    input: create,
                    varName: innerVarName,
                    withVars: [varName, innerVarName],
                });
                createStrs.push(createAndParams[0]);
                cypherParams = Object.assign(Object.assign({}, cypherParams), createAndParams[1]);
                createStrs.push(`MERGE (${varName})${inStr}${relTypeStr}${outStr}(${innerVarName})`);
            });
        });
    }
    if (deleteInput) {
        const deleteAndParams = create_delete_and_params_1.default({
            context,
            node,
            deleteInput,
            varName: `${varName}_delete`,
            parentVar: varName,
            withVars: [varName],
        });
        [deleteStr] = deleteAndParams;
        cypherParams = Object.assign(Object.assign({}, cypherParams), deleteAndParams[1]);
    }
    const projection = create_projection_and_params_1.default({
        node,
        context,
        fieldsByTypeName,
        varName,
    });
    [projStr] = projection;
    cypherParams = Object.assign(Object.assign({}, cypherParams), projection[1]);
    if ((_b = (_a = projection[2]) === null || _a === void 0 ? void 0 : _a.authValidateStrs) === null || _b === void 0 ? void 0 : _b.length) {
        projAuth = `CALL apoc.util.validate(NOT(${projection[2].authValidateStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
    }
    const cypher = [
        matchStr,
        whereStr,
        updateStr,
        connectStrs.join("\n"),
        disconnectStrs.join("\n"),
        createStrs.join("\n"),
        deleteStr,
        ...(projAuth ? [`WITH ${varName}`, projAuth] : []),
        `RETURN ${varName} ${projStr} AS ${varName}`,
    ];
    return [cypher.filter(Boolean).join("\n"), cypherParams];
}
exports.default = translateUpdate;
//# sourceMappingURL=translate-update.js.map