"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const verify_database_1 = __importDefault(require("./verify-database"));
const constants_1 = require("../constants");
describe("checkNeo4jCompat", () => {
    test("should add driver config to session", () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                // @ts-ignore
                records: [
                    {
                        toObject: () => ({
                            version: constants_1.MIN_NEO4J_VERSION,
                            apocVersion: constants_1.MIN_APOC_VERSION,
                            functions: constants_1.REQUIRED_APOC_FUNCTIONS,
                            procedures: constants_1.REQUIRED_APOC_PROCEDURES,
                        }),
                    },
                ],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        const driverConfig = {
            database: "darrellanddan",
            bookmarks: ["darrell", "dan"],
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: (config) => {
                expect(config).toEqual(driverConfig);
                return fakeSession;
            },
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        yield verify_database_1.default({ driver: fakeDriver, driverConfig });
    }));
    test("should throw expected Neo4j version", () => __awaiter(void 0, void 0, void 0, function* () {
        const invalidVersion = "2.3.1";
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [{ toObject: () => ({ version: invalidVersion }) }],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        yield expect(verify_database_1.default({ driver: fakeDriver })).rejects.toThrow(`Expected minimum Neo4j version: '${constants_1.MIN_NEO4J_VERSION}' received: '${invalidVersion}'`);
    }));
    test("should throw expected APOC version", () => __awaiter(void 0, void 0, void 0, function* () {
        const invalidApocVersion = "2.3.1";
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [{ toObject: () => ({ version: constants_1.MIN_NEO4J_VERSION, apocVersion: invalidApocVersion }) }],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        yield expect(verify_database_1.default({ driver: fakeDriver })).rejects.toThrow(`Expected minimum APOC version: '${constants_1.MIN_APOC_VERSION}' received: '${invalidApocVersion}'`);
    }));
    test("should throw missing APOC functions", () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [
                    {
                        toObject: () => ({
                            version: constants_1.MIN_NEO4J_VERSION,
                            apocVersion: constants_1.MIN_APOC_VERSION,
                            functions: [],
                        }),
                    },
                ],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        yield expect(verify_database_1.default({ driver: fakeDriver })).rejects.toThrow(`Missing APOC functions: [ ${constants_1.REQUIRED_APOC_FUNCTIONS.join(", ")} ]`);
    }));
    test("should throw missing APOC procedures", () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [
                    {
                        toObject: () => ({
                            version: constants_1.MIN_NEO4J_VERSION,
                            apocVersion: constants_1.MIN_APOC_VERSION,
                            functions: constants_1.REQUIRED_APOC_FUNCTIONS,
                            procedures: [],
                        }),
                    },
                ],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        yield expect(verify_database_1.default({ driver: fakeDriver })).rejects.toThrow(`Missing APOC procedures: [ ${constants_1.REQUIRED_APOC_PROCEDURES.join(", ")} ]`);
    }));
    test("should throw no errors with valid DB", () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [
                    {
                        toObject: () => ({
                            version: constants_1.MIN_NEO4J_VERSION,
                            apocVersion: constants_1.MIN_APOC_VERSION,
                            functions: constants_1.REQUIRED_APOC_FUNCTIONS,
                            procedures: constants_1.REQUIRED_APOC_PROCEDURES,
                        }),
                    },
                ],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        expect(yield verify_database_1.default({ driver: fakeDriver })).toBeUndefined();
    }));
    test("should throw no errors with valid DB (greater versions)", () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        const fakeSession = {
            // @ts-ignore
            run: () => ({
                records: [
                    {
                        toObject: () => ({
                            version: Number(constants_1.MIN_NEO4J_VERSION) + Math.random() * 10,
                            apocVersion: Number(constants_1.MIN_APOC_VERSION) + Math.random() * 10,
                            functions: constants_1.REQUIRED_APOC_FUNCTIONS,
                            procedures: constants_1.REQUIRED_APOC_PROCEDURES,
                        }),
                    },
                ],
            }),
            // @ts-ignore
            close: () => undefined,
        };
        // @ts-ignore
        const fakeDriver = {
            // @ts-ignore
            session: () => fakeSession,
            // @ts-ignore
            verifyConnectivity: () => undefined,
        };
        expect(yield verify_database_1.default({ driver: fakeDriver })).toBeUndefined();
    }));
});
//# sourceMappingURL=verify-database.test.js.map