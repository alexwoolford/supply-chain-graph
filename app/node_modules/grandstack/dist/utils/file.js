"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.whereIsConfigDir = exports.createConfigDir = exports.createProfileJson = exports.dirExistsAndIsNotEmpty = exports.dirIsNotEmpty = exports.getPackageLockJson = exports.exists = exports.CONFIG_DIR = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _logger = require("./logger");

const HOME = require("os").homedir();

const CONFIG_DIR_NAME = ".grandstack";
const grandStackName = "GRANDStack";

const CONFIG_DIR = _path.default.join(HOME, CONFIG_DIR_NAME);

exports.CONFIG_DIR = CONFIG_DIR;

const exists = pathToDirOrFile => _fs.default.existsSync(pathToDirOrFile);

exports.exists = exists;

const getPackageLockJson = () => _fs.default.readFileSync(_path.default.join(__dirname, "standard-package-lock.json")).toString();

exports.getPackageLockJson = getPackageLockJson;

const dirIsNotEmpty = dir => _fs.default.readdirSync(dir).length > 0;

exports.dirIsNotEmpty = dirIsNotEmpty;

const dirExistsAndIsNotEmpty = dir => exists(dir) && dirIsNotEmpty(dir);

exports.dirExistsAndIsNotEmpty = dirExistsAndIsNotEmpty;

const createProfileJson = ({
  profile,
  neo4j_uri,
  neo4j_user,
  neo4j_password
}) => {
  const profilePath = _path.default.join(CONFIG_DIR, `${profile}.json`);

  const profileContents = {
    neo4j_uri,
    neo4j_user,
    neo4j_password
  };

  if (exists(profilePath)) {
    (0, _logger.exitWithError)({
      tag: `ALREADYEXISTS`,
      msg: `Profile ${_chalk.default.italic(`${profile}.json`)} already exists`,
      code: 1
    });
  }

  _fs.default.writeFileSync(profilePath, (0, _stringify.default)(profileContents));

  return profilePath;
};

exports.createProfileJson = createProfileJson;

const createConfigDir = () => {
  if (dirExistsAndIsNotEmpty(CONFIG_DIR)) {
    (0, _logger.info)(`Skipping create, using current ${grandStackName} directory...`);
    return;
  }

  if (exists(CONFIG_DIR)) {
    (0, _logger.info)(`${grandStackName} directory exists at ${_chalk.default.italic(CONFIG_DIR)}`);
    return;
  }

  _fs.default.mkdirSync(CONFIG_DIR, {
    recursive: true
  });

  _fs.default.chmodSync(CONFIG_DIR, 0o700);

  (0, _logger.info)(`New ${grandStackName} directory created.`);
};

exports.createConfigDir = createConfigDir;

const whereIsConfigDir = () => {
  if (exists(CONFIG_DIR)) {
    return `${grandStackName} directory exists at ${_chalk.default.italic(CONFIG_DIR)}`;
  }

  return `${grandStackName} directory is missing from ${_chalk.default.italic(HOME)}
Try running ${_chalk.default.greenBright(`--init`)} for initial setup
`;
};

exports.whereIsConfigDir = whereIsConfigDir;