{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/src/components/RecentReviews.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useQuery, gql } from '@apollo/client';\nimport Title from './Title';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_RECENT_REVIEWS_QUERY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    reviews(options: { limit: 10, sort: { date: DESC } }) {\\n      user {\\n        name\\n      }\\n      business {\\n        name\\n      }\\n      date\\n      text\\n      stars\\n    }\\n  }\\n\"])));\nexport default function RecentReviews() {\n  _s();\n\n  const _useQuery = useQuery(GET_RECENT_REVIEWS_QUERY),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Recent Reviews\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      size: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Business Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"User Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Review Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: \"Review Stars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: data.reviews.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: moment(row.date).format('MMMM Do YYYY')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: row.business.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: row.user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: row.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: row.stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecentReviews, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = RecentReviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentReviews\");","map":{"version":3,"sources":["/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/src/components/RecentReviews.js"],"names":["React","Table","TableBody","TableCell","TableHead","TableRow","useQuery","gql","Title","moment","GET_RECENT_REVIEWS_QUERY","RecentReviews","loading","error","data","reviews","map","row","date","format","business","name","user","text","stars","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,wBAAwB,GAAGH,GAAH,wQAA9B;AAgBA,eAAe,SAASI,aAAT,GAAyB;AAAA;;AAAA,oBACLL,QAAQ,CAACI,wBAAD,CADH;AAAA,QAC9BE,OAD8B,aAC9BA,OAD8B;AAAA,QACrBC,KADqB,aACrBA,KADqB;AAAA,QACdC,IADc,aACdA,IADc;;AAEtC,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,SAAD;AAAA,kBACGE,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAkBC,GAAD,iBAChB,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA,sBAAYR,MAAM,CAACQ,GAAG,CAACC,IAAL,CAAN,CAAiBC,MAAjB,CAAwB,cAAxB;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,sBAAYF,GAAG,CAACG,QAAJ,CAAaC;AAAzB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA,sBAAYJ,GAAG,CAACK,IAAJ,CAASD;AAArB;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA,sBAAYJ,GAAG,CAACM;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA,sBAA0BN,GAAG,CAACO;AAA9B;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA,WAAeP,GAAG,CAACQ,EAAnB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAhCuBd,a;UACWL,Q;;;KADXK,a","sourcesContent":["import React from 'react'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport { useQuery, gql } from '@apollo/client'\nimport Title from './Title'\nimport moment from 'moment'\n\nconst GET_RECENT_REVIEWS_QUERY = gql`\n  {\n    reviews(options: { limit: 10, sort: { date: DESC } }) {\n      user {\n        name\n      }\n      business {\n        name\n      }\n      date\n      text\n      stars\n    }\n  }\n`\n\nexport default function RecentReviews() {\n  const { loading, error, data } = useQuery(GET_RECENT_REVIEWS_QUERY)\n  if (error) return <p>Error</p>\n  if (loading) return <p>Loading</p>\n\n  return (\n    <React.Fragment>\n      <Title>Recent Reviews</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Date</TableCell>\n            <TableCell>Business Name</TableCell>\n            <TableCell>User Name</TableCell>\n            <TableCell>Review Text</TableCell>\n            <TableCell align=\"right\">Review Stars</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.reviews.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{moment(row.date).format('MMMM Do YYYY')}</TableCell>\n              <TableCell>{row.business.name}</TableCell>\n              <TableCell>{row.user.name}</TableCell>\n              <TableCell>{row.text}</TableCell>\n              <TableCell align=\"right\">{row.stars}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}