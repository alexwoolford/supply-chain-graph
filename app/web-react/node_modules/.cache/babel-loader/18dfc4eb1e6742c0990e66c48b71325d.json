{"ast":null,"code":"import _objectSpread from \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/src/components/OrganizationList.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableHead, TableRow, Tooltip, Paper, TableSortLabel, TextField } from '@material-ui/core';\nimport Title from './Title';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    maxWidth: 700,\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n    margin: 'auto'\n  },\n  table: {\n    minWidth: 700\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    minWidth: 300\n  }\n});\n\nconst GET_ORGANIZATIONS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    query organizationsPaginateQuery(\\n        $first: Int\\n        $offset: Int\\n        $orderBy: [OrganizationSort]\\n        $filter: OrganizationWhere\\n    ) {\\n        organizations(\\n            options: { limit: $first, skip: $offset, sort: $orderBy }\\n            where: $filter\\n        ) {\\n            id: text\\n        }\\n    }\\n\"])));\n\nfunction OrganizationList(props) {\n  _s();\n\n  const classes = props.classes;\n\n  const _React$useState = React.useState('ASC'),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        order = _React$useState2[0],\n        setOrder = _React$useState2[1];\n\n  const _React$useState3 = React.useState('text'),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        orderBy = _React$useState4[0],\n        setOrderBy = _React$useState4[1];\n\n  const _React$useState5 = React.useState(0),\n        _React$useState6 = _slicedToArray(_React$useState5, 1),\n        page = _React$useState6[0];\n\n  const _React$useState7 = React.useState(10),\n        _React$useState8 = _slicedToArray(_React$useState7, 1),\n        rowsPerPage = _React$useState8[0];\n\n  const _React$useState9 = React.useState({\n    organizationFilter: ''\n  }),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        filterState = _React$useState10[0],\n        setFilterState = _React$useState10[1];\n\n  const getFilter = () => {\n    return filterState.organizationFilter.length > 0 ? {\n      text_CONTAINS: filterState.organizationFilter\n    } : {};\n  };\n\n  const _useQuery = useQuery(GET_ORGANIZATIONS, {\n    variables: {\n      first: rowsPerPage,\n      offset: rowsPerPage * page,\n      orderBy: {\n        [orderBy]: order\n      },\n      filter: getFilter()\n    }\n  }),\n        loading = _useQuery.loading,\n        data = _useQuery.data,\n        error = _useQuery.error;\n\n  const handleSortRequest = property => {\n    const newOrderBy = property;\n    let newOrder = 'DESC';\n\n    if (orderBy === property && order === 'DESC') {\n      newOrder = 'ASC';\n    }\n\n    setOrder(newOrder);\n    setOrderBy(newOrderBy);\n  };\n\n  const handleFilterChange = filterText => event => {\n    const val = event.target.value;\n    setFilterState(oldFilterState => _objectSpread(_objectSpread({}, oldFilterState), {}, {\n      [filterText]: val\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Organization List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"search\",\n      label: \"Organization Contains\",\n      className: classes.textField,\n      value: filterState.organizationFilter,\n      onChange: handleFilterChange('organizationFilter'),\n      margin: \"normal\",\n      variant: \"outlined\",\n      type: \"text\",\n      InputProps: {\n        className: classes.input\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 35\n    }, this), error && !loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 35\n    }, this), data && !loading && !error && /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            sortDirection: orderBy === 'text' ? order.toLowerCase() : false,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Sort\",\n              placement: \"bottom-start\",\n              enterDelay: 300,\n              children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                active: orderBy === 'text',\n                direction: order.toLowerCase(),\n                onClick: () => handleSortRequest('text'),\n                children: \"Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 33\n            }, this)\n          }, \"text\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: data.organizations.map(n => {\n          return /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: n.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 37\n            }, this)\n          }, n.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OrganizationList, \"YBsPUtH9Za1JJaWngRl6ZlEeNLQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = OrganizationList;\nexport default withStyles(styles)(OrganizationList);\n\nvar _c;\n\n$RefreshReg$(_c, \"OrganizationList\");","map":{"version":3,"sources":["/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/src/components/OrganizationList.js"],"names":["React","useQuery","gql","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Tooltip","Paper","TableSortLabel","TextField","Title","styles","theme","root","maxWidth","marginTop","spacing","overflowX","margin","table","minWidth","textField","marginLeft","marginRight","GET_ORGANIZATIONS","OrganizationList","props","classes","useState","order","setOrder","orderBy","setOrderBy","page","rowsPerPage","organizationFilter","filterState","setFilterState","getFilter","length","text_CONTAINS","variables","first","offset","filter","loading","data","error","handleSortRequest","property","newOrderBy","newOrder","handleFilterChange","filterText","event","val","target","value","oldFilterState","className","input","toLowerCase","organizations","map","n","text","id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Tooltip,\n    Paper,\n    TableSortLabel,\n    TextField,\n} from '@material-ui/core'\n\nimport Title from './Title'\n\nconst styles = (theme) => ({\n    root: {\n        maxWidth: 700,\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n        margin: 'auto',\n    },\n    table: {\n        minWidth: 700,\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: 300,\n    },\n})\n\nconst GET_ORGANIZATIONS = gql`\n    query organizationsPaginateQuery(\n        $first: Int\n        $offset: Int\n        $orderBy: [OrganizationSort]\n        $filter: OrganizationWhere\n    ) {\n        organizations(\n            options: { limit: $first, skip: $offset, sort: $orderBy }\n            where: $filter\n        ) {\n            id: text\n        }\n    }\n`\n\nfunction OrganizationList(props) {\n    const { classes } = props\n    const [order, setOrder] = React.useState('ASC')\n    const [orderBy, setOrderBy] = React.useState('text')\n    const [page] = React.useState(0)\n    const [rowsPerPage] = React.useState(10)\n    const [filterState, setFilterState] = React.useState({ organizationFilter: '' })\n\n    const getFilter = () => {\n        return filterState.organizationFilter.length > 0\n            ? { text_CONTAINS: filterState.organizationFilter }\n            : {}\n    }\n\n    const { loading, data, error } = useQuery(GET_ORGANIZATIONS, {\n        variables: {\n            first: rowsPerPage,\n            offset: rowsPerPage * page,\n            orderBy: { [orderBy]: order },\n            filter: getFilter(),\n        },\n    })\n\n    const handleSortRequest = (property) => {\n        const newOrderBy = property\n        let newOrder = 'DESC'\n\n        if (orderBy === property && order === 'DESC') {\n            newOrder = 'ASC'\n        }\n\n        setOrder(newOrder)\n        setOrderBy(newOrderBy)\n    }\n\n    const handleFilterChange = (filterText) => (event) => {\n        const val = event.target.value\n\n        setFilterState((oldFilterState) => ({\n            ...oldFilterState,\n            [filterText]: val,\n        }))\n    }\n\n    return (\n        <Paper className={classes.root}>\n            <Title>Organization List</Title>\n            <TextField\n                id=\"search\"\n                label=\"Organization Contains\"\n                className={classes.textField}\n                value={filterState.organizationFilter}\n                onChange={handleFilterChange('organizationFilter')}\n                margin=\"normal\"\n                variant=\"outlined\"\n                type=\"text\"\n                InputProps={{\n                    className: classes.input,\n                }}\n            />\n            {loading && !error && <p>Loading...</p>}\n            {error && !loading && <p>Error</p>}\n            {data && !loading && !error && (\n                <Table className={classes.table}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell\n                                key=\"text\"\n                                sortDirection={orderBy === 'text' ? order.toLowerCase() : false}\n                            >\n                                <Tooltip title=\"Sort\" placement=\"bottom-start\" enterDelay={300}>\n                                    <TableSortLabel\n                                        active={orderBy === 'text'}\n                                        direction={order.toLowerCase()}\n                                        onClick={() => handleSortRequest('text')}\n                                    >\n                                        Text\n                                    </TableSortLabel>\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.organizations.map((n) => {\n                            return (\n                                <TableRow key={n.id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {n.text}\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            )}\n        </Paper>\n    )\n}\n\nexport default withStyles(styles)(OrganizationList)\n"]},"metadata":{},"sourceType":"module"}