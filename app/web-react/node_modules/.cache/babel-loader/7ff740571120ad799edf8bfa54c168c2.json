{"ast":null,"code":"/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\nexport { // Definitions\nGraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull // Standard GraphQL Scalars\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Built-in Directives defined by the Spec\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective // \"Enum\" of Type Kinds\n, TypeKind // Constant Deprecation Reason\n, DEFAULT_DEPRECATION_REASON // GraphQL Types for introspection.\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Meta-field definitions.\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // Predicates\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\n, assertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\n, getNullableType, getNamedType // Validate GraphQL schema.\n, validateSchema, assertValidSchema } from './type'; // Parse and operate on GraphQL language source files.\n\nexport { Source, getLocation // Print source location\n, printLocation, printSourceLocation // Lex\n, createLexer, TokenKind // Parse\n, parse, parseValue, parseType // Print\n, print // Visit\n, visit, visitInParallel, visitWithTypeInfo, getVisitFn, BREAK, Kind, DirectiveLocation // Predicates\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language'; // Execute GraphQL queries.\n\nexport { execute, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL documents.\n\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\n, specifiedRules // Individual validation rules.\n, ExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule // SDL-specific validation rules\n, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule } from './validation'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from './error'; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery // @deprecated: use getIntrospectionQuery - will be removed in v15.\n, introspectionQuery // Gets the target Operation from a Document.\n, getOperationAST // Gets the Type for the target Operation AST.\n, getOperationRootType // Convert a GraphQLSchema to an IntrospectionQuery.\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\n, buildSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n, getDescription // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\n, extendSchema // Sort a GraphQLSchema.\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\n, printSchema // Print a GraphQLType to GraphQL Schema language.\n, printType // Prints the built-in introspection schema in the Schema Language\n// format.\n, printIntrospectionSchema // Create a GraphQLType from a GraphQL language AST.\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n, TypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\n, coerceInputValue // @deprecated use coerceInputValue - will be removed in v15\n, coerceValue // @deprecated use coerceInputValue - will be removed in v15\n, isValidJSValue // @deprecated use validation - will be removed in v15\n, isValidLiteralValue // Concatenates multiple AST together.\n, concatAST // Separates an AST into an AST per Operation.\n, separateOperations // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\n, stripIgnoredCharacters // Comparators for types\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\n, assertValidName // Determine if a string is a valid GraphQL name.\n, isValidNameError // Compares two GraphQLSchemas and detects breaking changes.\n, BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges // Report all deprecated usage within a GraphQL document.\n, findDeprecatedUsages } from './utilities';","map":{"version":3,"sources":["/Users/alexwoolford/PycharmProjects/supply-chain-graph/app/web-react/node_modules/graphql/index.mjs"],"names":["version","versionInfo","graphql","graphqlSync","GraphQLSchema","GraphQLDirective","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","TypeKind","DEFAULT_DEPRECATION_REASON","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isRequiredArgument","isRequiredInputField","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertSchema","assertDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","Source","getLocation","printLocation","printSourceLocation","createLexer","TokenKind","parse","parseValue","parseType","print","visit","visitInParallel","visitWithTypeInfo","getVisitFn","BREAK","Kind","DirectiveLocation","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","execute","defaultFieldResolver","defaultTypeResolver","responsePathAsArray","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","ExecutableDefinitionsRule","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","PossibleTypeExtensionsRule","GraphQLError","syntaxError","locatedError","printError","formatError","getIntrospectionQuery","introspectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","coerceInputValue","coerceValue","isValidJSValue","isValidLiteralValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"mappings":"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","sourcesContent":["/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\nexport { // Definitions\nGraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, // Standard GraphQL Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID, // Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, // \"Enum\" of Type Kinds\nTypeKind, // Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind, // Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, // Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective, // Assertions\nassertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType, // Un-modifiers\ngetNullableType, getNamedType, // Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type';\n// Parse and operate on GraphQL language source files.\nexport { Source, getLocation, // Print source location\nprintLocation, printSourceLocation, // Lex\ncreateLexer, TokenKind, // Parse\nparse, parseValue, parseType, // Print\nprint, // Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, BREAK, Kind, DirectiveLocation, // Predicates\nisDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language';\n// Execute GraphQL queries.\nexport { execute, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription';\n// Validate GraphQL documents.\nexport { validate, ValidationContext, // All validation rules in the GraphQL Specification.\nspecifiedRules, // Individual validation rules.\nExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule, // SDL-specific validation rules\nLoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule } from './validation';\n// Create, format, and print GraphQL errors.\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from './error';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery, // @deprecated: use getIntrospectionQuery - will be removed in v15.\nintrospectionQuery, // Gets the target Operation from a Document.\ngetOperationAST, // Gets the Type for the target Operation AST.\ngetOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\nintrospectionFromSchema, // Build a GraphQLSchema from an introspection result.\nbuildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema, // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\ngetDescription, // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema, // Sort a GraphQLSchema.\nlexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\nprintSchema, // Print a GraphQLType to GraphQL Schema language.\nprintType, // Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\ntypeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\nastFromValue, // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceInputValue, // @deprecated use coerceInputValue - will be removed in v15\ncoerceValue, // @deprecated use coerceInputValue - will be removed in v15\nisValidJSValue, // @deprecated use validation - will be removed in v15\nisValidLiteralValue, // Concatenates multiple AST together.\nconcatAST, // Separates an AST into an AST per Operation.\nseparateOperations, // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\nstripIgnoredCharacters, // Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap, // Asserts a string is a valid GraphQL name.\nassertValidName, // Determine if a string is a valid GraphQL name.\nisValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\nBreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges, // Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';\n"]},"metadata":{},"sourceType":"module"}